//split suite a la vidéo:

char	**ft_split(char const *s, char c)
{
	int	i;
	int	j;
	int	k;
	int	m;
	int	len;
	int	nbstr;
	char	**bigstr;
	char	*smallstr;

	len = ft_strlen(s);
	i = 0;
	nbstr = 0;
	while (i < len)
	{
		while (i < len)
		{
			if (s[i] == c)
				break;
			i++;
		}
		j = i;
		while (i < len)
		{
			if (s[i] != c)
				break;
			i++;
		}
		if (i > j)
			nbstr++;
	}
	bigstr = (char **)malloc(sizeof(char *) * (nbstr + 1));
	if (!bigstr)
		return (NULL);
	i = 0;
	while (i < len)
	{
		while (i < len)
		{
			if (s[i] == c)
				break;
			i++;
		}
		j = i;
		while (i < len)
		{
			if (s[i] != c)
				break;
			smallstr[k] = s[i];
			i++;
			k++;
		}
		smallstr[k] = '\0';
		bigstr[m] = malloc(sizeof(s) * k);
		if (!bigstr[m])
			return (NULL);
		m++;
	}
	return (bigstr);
}


// split approche substr avant video :

size_t	ft_countmot(char const *s, char c)
{
	size_t	i;
	size_t	nb;

	i = 0;
	nb = 1;
	while (s[i])
	{
		if (s[i] != c)
		{
			i++;
		}
		else
		{
			nb++;
			i++;
		}
	}
	return (nb);
}

char	*ft_small(const char *s, size_t i)
{
	size_t	j;

	j = 0;
	while (j < i)
		j++;
	return (ft_substr(s, i, j));
}

char	**ft_split(char const *s, char c)
{
	char	**bigstr;
	size_t	i;
	size_t	k;
	size_t	nbmot;

	nbmot = ft_countmot(s, c);
	bigstr = (char **)malloc(sizeof(char *) * (nbmot + 1));
	if (!bigstr)
		return (NULL);
	k = 0;
	i = 0;
	while (s[i])
	{
		if (s[i] != c && s[i])
			i++;
		else
		{
			while (s[i + 1] == c || s[i + 1])
			{
				bigstr[k] = ft_small(s, i);
				i++;
			}
			k++;
		}
		i++;
	}
	bigstr[k + 1] = NULL;
	return (bigstr);
}

// mon code en partie modif mais pas fonctionnel mais avec des commentaires que je veux garder
static int	ft_countmot(char *s, char c)
{
	int	nb;	//nb de mot
	int	i;	//index de *s

	i = 0;
	nb = 1;
	while (s[i])
	{
		if (s[i] != c)
		{
			nb++;
			while (s[i] != c && s[i])
				i++;
		}
		else
			i++;
	}
	return (nb);
}

static int	*ft_carastr(char *s, char c, int nbmot)
{
	int	i;	//index pour *s
	int	istr;	//index pour *lenstr
	int	lenmot;	//sera la longueur des mots
	int	*lenstr;

	lenstr = malloc(sizeof(int) * nbmot);	//pour les chaines
	if (!lenstr)
		return (NULL);
	i = 0;
	while (s[i])
	{
		if (s[i] != c)
		{
			lenmot = 0;
			istr = 0;
			while (s[i++] != c && s[i++])
				lenmot++;
			lenstr[istr++] = lenmot + 1;
		}
		else
			i++;
	}
	return (lenstr);
}

static char	**ft_free(char **bigstr, int j)
{
	int	i;	//index pour **bigstr -> le mot dont le malloc a pas marché

	i = 0;
	while (i < j)
	{
		free(bigstr[i]);
		i++;
	}
	free(bigstr);
	return (NULL);
}

static char	**ft_filltab(char *s, char c, char **bigstr, int *len)
{
	int	i;	//index pour *s
	int	k;	//index pour verticale de **bigstr
	int	j;	//index pour horizontale de **bigstr

	i = 0;
	j = 0;
	while (s[i])
	{
		if (s[i] != c)
		{
			bigstr[j] = malloc(sizeof(char) * len[j]);
			if (!bigstr[j])
				return (ft_free(bigstr, j));
			k = 0;
			while (s[i] != c && s[i])
				bigstr[j][k++] = s[i++];
			bigstr[j][k] = '\0';
			j++;
		}
		else
			i++;
	}
	bigstr[k] = NULL;
	free(len);
	return (bigstr);
}

char	**ft_split(char const *s, char c)
{
	int		nbstr;	//nb de mot
	int		*carastrnb;	//nb de cara par mots
	char	*str;	//new str pour plus en cast
	char	**bigstr;	//chaine de retour

	str = (char *)s;
	nbstr = ft_countmot(str, c);
	carastrnb = ft_carastr(str, c, nbstr);
	bigstr = (char **)malloc(sizeof(char *) * nbstr);
	if (!bigstr)
		return (NULL);
	return (ft_filltab(str, c, bigstr, carastrnb));
}
